---
- name: "{{ node_name }} - create node folder"
  file:
    path: "{{ node_path }}"
    state: directory

- name: "{{ node_name }} - create logs folder"
  file:
    path: "{{ node_path }}/logs"
    state: directory

- name: "{{ node_name }} - create old logs folder"
  file:
    path: "{{ node_path }}/logs/old"
    state: directory

- name: "{{ node_name }} - create logrotate conf"
  template:
    src: logrotate.conf.j2
    dest: "{{ node_path }}/logrotate.conf"

- name: "{{ node_name }} - install logrotate cronjob"
  become: yes
  become_user: root
  template:
    src: logrotate.j2
    dest: "/etc/cron.hourly/{{ service_name }}-logrotate"
    owner: root
    group: root
    mode: "0755"

- name: "{{ node_name }} - download parity binary"
  get_url:
    url: "{{ parity_bin_url }}"
    checksum: "sha256:{{ parity_bin_sha256 }}"
    dest: "{{ node_path }}/parity"
    mode: "0755"
  # notify:
  #   - restart {{ service_name }}

- name: "{{ node_name }} - create keys folder"
  file:
    path: "{{ node_path }}/parity_data/keys/{{ chain_folder_name }}"
    state: directory
  when: signer_address != ""

- name: "{{ node_name }} - put signer keyfile into keys folder"
  template:
    src: keyfile.json.j2
    dest: "{{ node_path }}/parity_data/keys/{{ chain_folder_name }}/{{ signer_address }}.json"
  when: signer_address != ""

- name: "{{ node_name }} - download chain.json"
  get_url:
    url: "{{ chain_json_url }}"
    dest: "{{ node_path }}/{{ chain_name | lower }}.json"
  when: chain_json_url != ""
  # notify:
  #   - restart {{ service_name }}

- name: "{{ node_name }} - download bootnodes file"
  get_url:
    url: "{{ bootnodes_url }}"
    dest: "{{ node_path }}/{{ bootnodes_url | basename }}"
  # notify:
  #   - restart {{ service_name }}
  when: bootnodes_url != ""

- name: "{{ node_name }} - create node.toml"
  template:
    src: node.toml.j2
    dest: "{{ node_path }}/node.toml"
  # notify:
  #   - restart {{ service_name }}

- name: "{{ node_name }} - create signer password file"
  template:
    src: pass.pwd.j2
    dest: "{{ node_path }}/pass.pwd"
  when: signer_address != ""
  # notify:
  #   - restart {{ service_name }}

- name: "{{ node_name }} - install parity service"
  become: yes
  become_user: root
  template:
    src: parity.service.j2
    dest: /etc/systemd/system/{{ service_name }}.service
    owner: root
    group: root
  # notify:
  #   - restart {{ service_name }}

- name: "{{ node_name }} - enable parity service to start on boot"
  become: yes
  become_user: root
  command: "systemctl enable {{ service_name }}.service"

- name: "{{ node_name }} - ensure parity service started"
  become: yes
  become_user: root
  systemd:
    name: "{{ service_name }}.service"
    state: started
    enabled: yes
