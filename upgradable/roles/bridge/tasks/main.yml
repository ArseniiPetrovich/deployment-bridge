---
- name: "Bridge - create bridge folder"
  file:
    path: "{{ bridge_path }}"
    state: directory

- name: "Bridge - download bridge binary"
  get_url:
    url: "{{ bridge_bin_url }}"
    checksum: "sha256:{{ bridge_bin_sha256 }}"
    dest: "{{ bridge_path }}/bridge"
    mode: "0755"
  notify:
    - restart {{ bridge_service_name }}

- name: "Bridge - create file with home contract bytecode"
  template:
    src: "HomeBridge.bin.j2"
    dest: "{{ bridge_path }}/HomeBridge.bin"
    force: no

- name: "Bridge - create file with foreign contract bytecode"
  template:
    src: "ForeignBridge.bin.j2"
    dest: "{{ bridge_path }}/ForeignBridge.bin"
    force: no

- name: "Bridge - create bridge config"
  template:
    src: config.toml.j2
    dest: "{{ bridge_path }}/config.toml"
    force: no
  notify:
    - restart bridge

- name: "Bridge - create db.toml file"
  template:
    src: "db.toml.j2"
    dest: "{{ bridge_path }}/db.toml"
    force: no

- name: "Bridge - install bridge service"
  become: yes
  become_user: root
  template:
    src: bridge.service.j2
    dest: /etc/systemd/system/{{ bridge_service_name }}.service
    owner: root
    group: root
    mode: "0755"
  notify:
    - restart {{ bridge_service_name }}

# - name: "Wait for parity-home node to sync"
#   command: curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' http://localhost:{{ home_rpc_port }}
#   register: home_sync_status
#   until: not (home_sync_status.stdout | from_json).result
#   delay: 30
#   retries: 100
#   when: wait_sync

# - name: "Wait for parity-foreign node to sync"
#   command: curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' http://localhost:{{ home_rpc_port }}
#   register: foreign_sync_status
#   until: not (foreign_sync_status.stdout | from_json).result
#   delay: 30
#   retries: 100
#   when: wait_sync

- name: "Bridge - enabled bridge service to start at boot"
  become: yes
  become_user: root
  command: "systemctl enable {{ bridge_service_name }}.service"

- name: "Bridge - ensure bridge service is running"
  become: yes
  become_user: root
  systemd:
    name: "{{ bridge_service_name }}.service"
    state: started
    enabled: yes
