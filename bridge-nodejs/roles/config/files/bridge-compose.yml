version: '3'
services:
  bridge_request:
    build: .
    command: 'true'
    env_file: ./.env
    environment:
      - NODE_ENV=production
      - QUEUE_URL=amqp://rabbit
      - REDIS_URL=redis://redis
      - VALIDATOR_ADDRESS=${VALIDATOR_ADDRESS}
      - VALIDATOR_ADDRESS_PRIVATE_KEY=${VALIDATOR_ADDRESS_PRIVATE_KEY}
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    restart: always
    entrypoint: npm run watcher:signature-request
    networks:
      - net_request
      - net_db
  bridge_collected:
    build: .
    command: 'true'
    env_file: ./.env
    environment: [NODE_ENV=production, 'QUEUE_URL=amqp://rabbit', 'REDIS_URL=redis://redis']
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    restart: always
    entrypoint: npm run watcher:collected-signatures
    networks:
      - net_collected
      - net_db
  bridge_affirmation:
    build: .
    command: 'true'
    env_file: ./.env
    environment: [NODE_ENV=production, 'QUEUE_URL=amqp://rabbit', 'REDIS_URL=redis://redis']
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    restart: always
    entrypoint: npm run watcher:affirmation-request
    networks:
      - net_affirmation
      - net_db
  bridge_senderhome:
    build: .
    command: 'true'
    env_file: ./.env
    environment: [NODE_ENV=production, 'QUEUE_URL=amqp://rabbit', 'REDIS_URL=redis://redis']
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    restart: always
    entrypoint: npm run sender:home
    networks:
      - net_senderhome
      - net_db
  bridge_senderforeign:
    build: .
    command: 'true'
    env_file: ./.env
    environment: [NODE_ENV=production, 'QUEUE_URL=amqp://rabbit', 'REDIS_URL=redis://redis']
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    restart: always
    entrypoint: npm run sender:foreign
    networks:
      - net_senderforeign
      - net_db
  rabbit:
    environment: [RABBITMQ_NODENAME=node@rabbit]
    hostname: rabbit
    image: rabbitmq:3
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    networks:
      - net_db
    restart: always
    volumes: ['~/bridge_data/rabbitmq:/var/lib/rabbitmq/mnesia']
  redis:
    command: [redis-server, --appendonly, 'yes']
    hostname: redis
    image: redis:4
    logging:
      driver: syslog
      options: {tag: '{{.Name}}/{{.ID}}'}
    networks:
      - net_db
    restart: always
    volumes: ['~/bridge_data/redis:/data']

networks:
  net_db:
    driver: bridge
  net_request:
    driver: bridge
  net_collected:
    driver: bridge
  net_affirmation:
    driver: bridge
  net_senderhome:
    driver: bridge
  net_senderforeign:
    driver: bridge
