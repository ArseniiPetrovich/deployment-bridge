from web3 import Web3
from web3.utils.transactions import wait_for_transaction_receipt
import json
from toml import load
import sys

bridge_config = load('{{ base_path }}/bridge/config.toml')
bridge_db     = load('{{ base_path }}/bridge/db.toml')

### FOREIGN ###
_contractName='ForeignBridge'
_abiFile=_contractName+".abi"

_IPC_file = bridge_config['foreign']['ipc']
web3 = Web3(Web3.IPCProvider(_IPC_file))

_actor       = web3.toChecksumAddress(bridge_config['foreign']['account'])
_gasPrice    = bridge_config['transactions']['foreign_deploy']['gas_price']
_txTempl={'from': _actor, 'gasPrice': _gasPrice}

bridgeContractAddress = web3.toChecksumAddress(bridge_db['foreign_contract_address'])

with open(_abiFile) as f:
    _contractABI=json.load(f)
f.close()

ContractFactory = web3.eth.contract(
    abi = _contractABI,
)

#print("ForeignBridge ABI: " + str(json.dumps(_contractABI)));

BridgeContract = ContractFactory(bridgeContractAddress)

print("Calling ForeignBridge.setGasLimitWithdrawConfirm...")
txHash = BridgeContract.transact(transaction=_txTempl).setGasLimitWithdrawConfirm({{ withdraw_confirm_gas }})
wait_for_transaction_receipt(web3, txHash)

print("Calling ForeignBridge.setGasLimitDepositRelay...")
txHash = BridgeContract.transact(transaction=_txTempl).setGasLimitDepositRelay({{ deposit_relay_gas }})
wait_for_transaction_receipt(web3, txHash)

### HOME ###
_contractName='HomeBridge'
_abiFile=_contractName+".abi"

_IPC_file = bridge_config['home']['ipc']
web3 = Web3(Web3.IPCProvider(_IPC_file))

_actor       = web3.toChecksumAddress(bridge_config['home']['account'])
_gasPrice    = bridge_config['transactions']['home_deploy']['gas_price']
_txTempl={'from': _actor, 'gasPrice': _gasPrice}

bridgeContractAddress = web3.toChecksumAddress(bridge_db['home_contract_address'])

with open(_abiFile) as f:
    _contractABI=json.load(f)
f.close()

ContractFactory = web3.eth.contract(
    abi = _contractABI,
)

#print("HomeBridge ABI: " + str(json.dumps(_contractABI)));

BridgeContract = ContractFactory(bridgeContractAddress)

print("Calling HomeBridge.setGasLimitWithdrawRelay...")

txHash = BridgeContract.transact(transaction=_txTempl).setGasLimitWithdrawRelay({{ withdraw_relay_gas }})
wait_for_transaction_receipt(web3, txHash)

### DONE ###
sys.exit(0)
